Help on class OMXPlayer in module omxplayer.player:

class OOMMXXPPllaayyeerr(__builtin__.object)
 |  OMXPlayer controller
 |  
 |  This works by speaking to OMXPlayer over DBus sending messages.
 |  
 |  Args:
 |      source (str): Path to the file (as ~/Videos/my-video.mp4) or URL you wish to play
 |      args (list): used to pass option parameters to omxplayer.  see: https://github.com/popcornmix/omxplayer#synopsis
 |  
 |  
 |  Multiple argument example:
 |  
 |  >>> OMXPlayer('path.mp4', args=['--no-osd', '--no-keys', '-b'])
 |  
 |  Methods defined here:
 |  
 |  ____iinniitt____(self, source, args=[], bus_address_finder=None, Connection=None, pause=False)
 |  
 |  aaccttiioonn(self, code)
 |      Executes a keyboard command via a code
 |      
 |      Args:
 |          code (int): The key code you wish to emulate
 |                      refer to ``keys.py`` for the possible keys
 |      
 |      Returns:
 |          None:
 |  
 |  ccaann__ccoonnttrrooll(self)
 |      Returns:
 |          bool:
 |  
 |  ccaann__ggoo__nneexxtt(self)
 |      Returns:
 |          bool: Whether the player can move to the next item in the playlist
 |  
 |  ccaann__ggoo__pprreevviioouuss(self)
 |      Returns:
 |          bool: Whether the player can move to the previous item in the
 |          playlist
 |  
 |  ccaann__ppaauussee(self)
 |      Returns:
 |          bool:
 |  
 |  ccaann__ppllaayy(self)
 |      Returns:
 |          bool:
 |  
 |  ccaann__qquuiitt(self)
 |      Returns:
 |          bool:
 |  
 |  ccaann__sseeeekk(self)
 |      Returns:
 |          bool: Whether the player can seek
 |  
 |  ccaann__sseett__ffuullllssccrreeeenn(self)
 |      Returns:
 |          bool:
 |  
 |  dduurraattiioonn(self)
 |      Returns:
 |          float: The duration in seconds
 |  
 |  ggeett__ffiilleennaammee(self)
 |      Returns:
 |          str: source currently playing
 |      
 |      .. deprecated:: 0.2.0
 |         Use: :func:`get_source` instead.
 |  
 |  ggeett__ssoouurrccee(self)
 |      Returns:
 |          str: source currently playing
 |  
 |  iiddeennttiittyy(self)
 |      Get the ID of the media player
 |      
 |      Returns:
 |          bool:
 |  
 |  iiss__ppllaayyiinngg(self)
 |      Returns:
 |          bool: Whether the player is playing
 |  
 |  lliisstt__aauuddiioo(self)
 |      Returns:
 |          [str]: A list of all known audio streams, each item is in the
 |          format: ``<index>:<language>:<name>:<codec>:<active>``
 |  
 |  lliisstt__ssuubbttiittlleess(self)
 |      Returns:
 |          [str]: A list of all known subtitles, each item is in the
 |          format: ``<index>:<language>:<name>:<codec>:<active>``
 |  
 |  lliisstt__vviiddeeoo(self)
 |      Returns:
 |          [str]: A list of all known video streams, each item is in the
 |          format: ``<index>:<language>:<name>:<codec>:<active>``
 |  
 |  llooaadd(self, source, pause=False)
 |      Loads a new source (as a file) from ``source`` (a file path or URL)
 |      by killing the current ``omxplayer`` process and forking a new one.
 |      
 |      Args:
 |          source (string): Path to the file to play or URL
 |  
 |  mmaaxxiimmuumm__rraattee(self)
 |      Returns:
 |          str: The maximum playback rate
 |  
 |  mmiinniimmuumm__rraattee(self)
 |      Returns:
 |          str: The minimum playback rate
 |  
 |  mmuuttee(self)
 |      Turns mute on, if the audio is already muted, then this does not do
 |      anything
 |      
 |      Returns:
 |          None:
 |  
 |  ppaauussee(self)
 |      Return:
 |          None:
 |  
 |  ppllaayy(self)
 |      Returns:
 |          None:
 |  
 |  ppllaayy__ppaauussee(self)
 |      Return:
 |          None:
 |  
 |  ppllaayy__ssyynncc(self)
 |      Returns:
 |          None:
 |  
 |  ppllaayybbaacckk__ssttaattuuss(self)
 |      Returns:
 |          str: One of ("Playing" | "Paused" | "Stopped")
 |  
 |  ppoossiittiioonn(self)
 |      Returns:
 |          float: The position in seconds
 |  
 |  qquuiitt(self)
 |  
 |  sseeeekk(self, relative_position)
 |      Args:
 |          relative_position (float): The position in seconds to seek to.
 |  
 |  sseett__aallpphhaa(self, alpha)
 |      Args:
 |          alpha (float): The transparency (0..255)
 |  
 |  sseett__aassppeecctt__mmooddee(self, mode)
 |      Args:
 |          mode (str): One of ("letterbox" | "fill" | "stretch")
 |  
 |  sseett__ppoossiittiioonn(self, position)
 |      Args:
 |          position (float): The position in seconds.
 |  
 |  sseett__vviiddeeoo__ccrroopp(self, x1, y1, x2, y2)
 |      Args:
 |          Image position (int, int, int, int):
 |  
 |  sseett__vviiddeeoo__ppooss(self, x1, y1, x2, y2)
 |      Args:
 |          Image position (int, int, int, int):
 |  
 |  sseett__vvoolluummee(self, volume)
 |      Args:
 |          volume (float): Volume in millibels
 |  
 |  ssttoopp(self)
 |  
 |  uunnmmuuttee(self)
 |      Unmutes the video, if the audio is already unmuted, then this does
 |      not do anything
 |      
 |      Returns:
 |          None:
 |  
 |  vvoolluummee(self)
 |      Returns:
 |          volume (float): Volume in millibels
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
